package ProductManagerGUI;

import AdminGUI.AdminEditProfile;
import AdminGUI.AdminManagePM;
import assignment.FileIO;
import assignment.ProductCatalogue;
import assignment.ProductItem;
import assignment.Supplier;
import assignment.productManager;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PMManageProductCatalogue extends javax.swing.JFrame {

    productManager ProductManager;
    Supplier supplier;
    ProductCatalogue catalogue;

    public PMManageProductCatalogue(productManager PM) throws IOException {
        initComponents();
        this.ProductManager = PM;
        this.supplier = new Supplier(null);
        this.catalogue = new ProductCatalogue();
        JTable CatTable = this.CatalogueTable;
        FileIO fileIO = new FileIO();
        File file = fileIO.searchFilePath("ProductCatalogue.txt");
        String filepath = file.getAbsolutePath();
        //Reference Number	Title	Banner	Description	Season	Date Generated	SupplierID
        String[] ItemcolumnsName = {"Reference Number", "Title", "BannerPath", "Description", "Season",
            "Date Generated", "SupplierID"};
        fileIO.buildTable(file, CatTable, ItemcolumnsName);
        TableColumn tcolPM = CatTable.getColumnModel().getColumn(2);
        CatTable.removeColumn(tcolPM);
        SupplierComboBoxItems();
    }

    public ImageIcon ResizeImage(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(BannerOutputLabel.getWidth(), BannerOutputLabel.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    public static String getFileExtension(String fullName) {
        String fileName = new File(fullName).getName();
        int dotIndex = fileName.lastIndexOf('.');
        return (dotIndex == -1) ? "" : fileName.substring(dotIndex + 1);
    }

    public void ResetEverything() throws IOException {
        DefaultTableModel model = (DefaultTableModel) CatalogueTable.getModel();
        model.setRowCount(0);
        JTable CatTable = this.CatalogueTable;
        FileIO fileIO = new FileIO();
        File file = fileIO.searchFilePath("ProductCatalogue.txt");
        String[] ItemcolumnsName = {"Reference Number", "Title", "BannerPath", "Description", "Season",
            "Date Generated", "SupplierID"};
        fileIO.buildTable(file, CatTable, ItemcolumnsName);
        TableColumn tcolPM = CatTable.getColumnModel().getColumn(2);
        CatTable.removeColumn(tcolPM);
        this.RefNumInput.setText(null);
        this.TitleInput.setText(null);
        this.DescriptionInput.setText(null);
        this.BannerPathInput.setText(null);
        this.BannerOutputLabel.setIcon(null);
        this.SupplierIDComboBox.setSelectedItem(null);
        this.DateEndInput.setText(null);
        this.DateStartedInput.setText(null);
        this.DateEndInput.setText(null);
        this.SearchCatalogueInput.setText("Enter Catalogue ID");
    }

    public void SupplierComboBoxItems() {
        FileIO fileIO = new FileIO();
        ArrayList<String> AllDetails = null;
        File SupplierFile = fileIO.searchFilePath("Supplier.txt");
        try {
            SupplierIDComboBox.removeAllItems();
            AllDetails = fileIO.retrieveAllDetails(SupplierFile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PMManageProductItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < AllDetails.size(); i++) {
            String record[] = AllDetails.get(i).split("\t");
            if (!record[0].isEmpty()) {
                SupplierIDComboBox.addItem(record[0]);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SidePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ProfileButton = new javax.swing.JButton();
        ProductButton = new javax.swing.JButton();
        ManageProfileButton = new javax.swing.JButton();
        LogoutButton = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        MainPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        CatalogueTable = new javax.swing.JTable();
        CatalogueLabel = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        SearchProductCatalogueLabel = new javax.swing.JLabel();
        SearchCatalogueInput = new javax.swing.JTextField();
        ReferenceNumberLabel = new javax.swing.JLabel();
        TitleLabel = new javax.swing.JLabel();
        RefNumInput = new javax.swing.JTextField();
        TitleInput = new javax.swing.JTextField();
        BannerLabel = new javax.swing.JLabel();
        BannerPathInput = new javax.swing.JTextField();
        UploadButton = new javax.swing.JButton();
        DescriptionLabel = new javax.swing.JLabel();
        DateEndedLabel = new javax.swing.JLabel();
        SupplierIDComboBox = new javax.swing.JComboBox<>();
        SupplierIDInput = new javax.swing.JLabel();
        DateEndInput = new javax.swing.JTextField();
        BannerOutputLabel = new javax.swing.JLabel();
        ExportPdfButton = new javax.swing.JButton();
        DateStartedLabel = new javax.swing.JLabel();
        DateStartedInput = new javax.swing.JTextField();
        DescriptionInput = new javax.swing.JTextField();
        RefreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SidePanel.setBackground(new java.awt.Color(0, 32, 63));
        SidePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconFile/AccountIconBig.png"))); // NOI18N

        ProfileButton.setBackground(new java.awt.Color(255, 255, 255));
        ProfileButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ProfileButton.setForeground(new java.awt.Color(0, 32, 63));
        ProfileButton.setText("HOME");
        ProfileButton.setBorder(new javax.swing.border.MatteBorder(null));
        ProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfileButtonActionPerformed(evt);
            }
        });

        ProductButton.setBackground(new java.awt.Color(255, 255, 255));
        ProductButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ProductButton.setForeground(new java.awt.Color(0, 32, 63));
        ProductButton.setText("MANAGE");
        ProductButton.setBorder(new javax.swing.border.MatteBorder(null));
        ProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductButtonActionPerformed(evt);
            }
        });

        ManageProfileButton.setBackground(new java.awt.Color(255, 255, 255));
        ManageProfileButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ManageProfileButton.setForeground(new java.awt.Color(0, 32, 63));
        ManageProfileButton.setText("EDIT PROFILE");
        ManageProfileButton.setBorder(new javax.swing.border.MatteBorder(null));
        ManageProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageProfileButtonActionPerformed(evt);
            }
        });

        LogoutButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LogoutButton.setForeground(new java.awt.Color(255, 255, 255));
        LogoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconFile/logout.png"))); // NOI18N
        LogoutButton.setText("Back to Home");
        LogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutButtonMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PRODUCT");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("MANAGER");

        javax.swing.GroupLayout SidePanelLayout = new javax.swing.GroupLayout(SidePanel);
        SidePanel.setLayout(SidePanelLayout);
        SidePanelLayout.setHorizontalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addGroup(SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SidePanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ManageProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(ProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(SidePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LogoutButton))
                    .addGroup(SidePanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        SidePanelLayout.setVerticalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ManageProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                .addComponent(LogoutButton)
                .addContainerGap())
        );

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CatalogueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        CatalogueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CatalogueTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(CatalogueTable);

        MainPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 123, 710, 190));

        CatalogueLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        CatalogueLabel.setForeground(new java.awt.Color(0, 32, 63));
        CatalogueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CatalogueLabel.setText("PRODUCT CATALOGUE");
        MainPanel.add(CatalogueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 420, 60));

        AddButton.setText("ADD");
        AddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddButtonMouseClicked(evt);
            }
        });
        MainPanel.add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 540, 120, -1));

        UpdateButton.setText("UPDATE");
        UpdateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateButtonMouseClicked(evt);
            }
        });
        MainPanel.add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 160, -1));

        RemoveButton.setText("REMOVE");
        RemoveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemoveButtonMouseClicked(evt);
            }
        });
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });
        MainPanel.add(RemoveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 330, 160, -1));

        SearchButton.setText("SEARCH");
        SearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchButtonMouseClicked(evt);
            }
        });
        MainPanel.add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 90, 120, -1));

        SearchProductCatalogueLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SearchProductCatalogueLabel.setText("Search Product Catalogue:");
        MainPanel.add(SearchProductCatalogueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, 20));

        SearchCatalogueInput.setText("Enter Catalogue ID");
        SearchCatalogueInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchCatalogueInputMouseClicked(evt);
            }
        });
        SearchCatalogueInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCatalogueInputActionPerformed(evt);
            }
        });
        MainPanel.add(SearchCatalogueInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 320, -1));

        ReferenceNumberLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ReferenceNumberLabel.setText("Reference Number:");
        MainPanel.add(ReferenceNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));

        TitleLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        TitleLabel.setText("Title:");
        MainPanel.add(TitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));
        MainPanel.add(RefNumInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, 110, -1));
        MainPanel.add(TitleInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 400, 110, -1));

        BannerLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        BannerLabel.setText("Banner:");
        MainPanel.add(BannerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));
        MainPanel.add(BannerPathInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 110, -1));

        UploadButton.setText("Upload");
        UploadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UploadButtonMouseClicked(evt);
            }
        });
        MainPanel.add(UploadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, -1, -1));

        DescriptionLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        DescriptionLabel.setText("Description:");
        MainPanel.add(DescriptionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 440, -1, -1));

        DateEndedLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        DateEndedLabel.setText("Date End:");
        MainPanel.add(DateEndedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, -1, -1));

        SupplierIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        MainPanel.add(SupplierIDComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 400, -1, -1));

        SupplierIDInput.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SupplierIDInput.setText("SupplierID:");
        MainPanel.add(SupplierIDInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, -1, -1));
        MainPanel.add(DateEndInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, 90, -1));
        MainPanel.add(BannerOutputLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 470, 210, 90));

        ExportPdfButton.setText("EXPORT PDF");
        ExportPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportPdfButtonActionPerformed(evt);
            }
        });
        MainPanel.add(ExportPdfButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 540, 120, -1));

        DateStartedLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        DateStartedLabel.setText("Date Started:");
        MainPanel.add(DateStartedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, -1, 20));
        MainPanel.add(DateStartedInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 370, 90, 20));
        MainPanel.add(DescriptionInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 440, 220, 30));

        RefreshButton.setText("REFRESH");
        RefreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RefreshButtonMouseClicked(evt);
            }
        });
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        MainPanel.add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 240, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(SidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 760, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(SidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfileButtonActionPerformed
        try {
            new PMHome(ProductManager).setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(PMProductCategory.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_ProfileButtonActionPerformed

    private void ProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductButtonActionPerformed
        new PMManageProduct(ProductManager).setVisible(true);
        dispose();
    }//GEN-LAST:event_ProductButtonActionPerformed

    private void ManageProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageProfileButtonActionPerformed
        new PMEditProfile(ProductManager).setVisible(true);
        dispose();
    }//GEN-LAST:event_ManageProfileButtonActionPerformed

    private void LogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutButtonMouseClicked
        try {
            new PMHome(ProductManager).setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(PMProductCategory.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_LogoutButtonMouseClicked

    private void SearchCatalogueInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCatalogueInputActionPerformed

    }//GEN-LAST:event_SearchCatalogueInputActionPerformed

    private void SearchCatalogueInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchCatalogueInputMouseClicked
        this.SearchCatalogueInput.setText(null);
    }//GEN-LAST:event_SearchCatalogueInputMouseClicked

    private void SearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchButtonMouseClicked
        FileIO fileIO = new FileIO();
        File file = FileIO.searchFilePath("ProductCatalogue.txt");
        
        try {
            if (SearchCatalogueInput.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "No ID input!");
            } else {
                if (!SearchCatalogueInput.getText().isEmpty()) {
                    String[] SearchedDetails = fileIO.retrieveDetails(file, SearchCatalogueInput.getText());
                    JTable PMTable = this.CatalogueTable;
                    DefaultTableModel PMTableModel = new DefaultTableModel();
                    CatalogueTable.setModel(PMTableModel);
                    if (SearchedDetails != null) {
                        String[] ItemcolumnsName = {"Reference Number", "Title", "BannerPath", "Description", "Season",
            "Date Generated", "SupplierID"};
                        PMTableModel.setColumnIdentifiers(ItemcolumnsName);
                        PMTableModel.addRow(SearchedDetails);
                        TableColumn tcolPM = PMTable.getColumnModel().getColumn(2);
                        PMTable.removeColumn(tcolPM);
                        JOptionPane.showMessageDialog(null, "ID found!");
                    } else {
                        JOptionPane.showMessageDialog(null, "ID not found!");
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(AdminManagePM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchButtonMouseClicked

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        FileIO fileIO = new FileIO();
        DefaultTableModel model = (DefaultTableModel) CatalogueTable.getModel();
        int selectedRowIndex = CatalogueTable.getSelectedRow();
        String primaryKey = (String) model.getValueAt(selectedRowIndex, 0);
        File file = fileIO.searchFilePath("ProductCatalogue.txt");
        String filePath = file.getAbsolutePath();
        try {
            if (fileIO.removeDetail(filePath, primaryKey, 7)) {
                JOptionPane.showMessageDialog(null, "Item removed!");
            } else {
                JOptionPane.showMessageDialog(null, "Item failed to be removed!");
            }
        } catch (IOException ex) {
            Logger.getLogger(PMManageProductItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void RemoveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemoveButtonMouseClicked
        FileIO fileIO = new FileIO();
        DefaultTableModel model = (DefaultTableModel) CatalogueTable.getModel();
        int selectedRowIndex = CatalogueTable.getSelectedRow();
        String primaryKey = (String) model.getValueAt(selectedRowIndex, 0);
        File file = fileIO.searchFilePath("ProductCategory.txt");
        String filePath = file.getAbsolutePath();
        try {
            if (fileIO.removeDetail(filePath, primaryKey, 7)) {
                JOptionPane.showMessageDialog(null, "Item removed!");
            } else {
                JOptionPane.showMessageDialog(null, "Item failed to be removed!");
            }
        } catch (IOException ex) {
            Logger.getLogger(PMManageProductItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RemoveButtonMouseClicked

    private void UpdateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateButtonMouseClicked
        FileIO fileIO = new FileIO();
        DefaultTableModel model = (DefaultTableModel) CatalogueTable.getModel();
        int selectedRowIndex = CatalogueTable.getSelectedRow();
        String primaryKey = (String) model.getValueAt(selectedRowIndex, 0);
        File file = fileIO.searchFilePath("ProductCatalogue.txt");

        String filePath = file.getAbsolutePath();
        String newRefNum = this.RefNumInput.getText().trim();
        String newTitle = this.TitleInput.getText().trim();
        String newSeason = (this.DateStartedInput.getText().trim()) + '-' + (this.DateEndInput.getText().trim());
        System.out.println(newSeason);
        String newDescription = this.DescriptionInput.getText().trim();
        String newSupplierID = (String) this.SupplierIDComboBox.getSelectedItem();
        String newImagePath = this.BannerPathInput.getText().trim();

        if (!newRefNum.isEmpty() && !newRefNum.equals(this.catalogue.CatRefNum)) {
            this.catalogue.CatRefNum = newRefNum;
        }
        if (!newTitle.isEmpty() && !newTitle.equals(this.TitleInput.getText().trim())) {
            this.catalogue.CatTitle = newTitle;
        }

        if (!newSeason.isEmpty() && !newSeason.equals(this.DateEndInput.getText().trim())) {
            this.catalogue.CatSeason = newSeason;
        }
        if (!newDescription.isEmpty() && !newDescription.equals(this.catalogue.CatDescription)) {
            this.catalogue.CatDescription = newDescription;
        }
        if (!newSupplierID.isEmpty() && !newSupplierID.equals(this.catalogue.SupplierID)) {
            this.catalogue.SupplierID = newSupplierID;
        }
        if (!newImagePath.isEmpty() && !newImagePath.equals(this.catalogue.CatFilePath)) {
            this.catalogue.CatFilePath = newImagePath;
        }

        String[] newDetails = {this.catalogue.CatRefNum, this.catalogue.CatTitle, this.catalogue.CatFilePath,
            this.catalogue.CatDescription, this.catalogue.CatSeason,
            null, this.catalogue.SupplierID
        };

        try {
            if (FileIO.modifyFile(filePath, primaryKey, newDetails, 7)) {
                JOptionPane.showMessageDialog(null, "Catalogue details succesfully updated!");
            } else {
                JOptionPane.showMessageDialog(null, "Catalogue details not updated...");
            }
        } catch (IOException ex) {
            Logger.getLogger(AdminEditProfile.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Something wrong");
        }
        try {
            ResetEverything();
        } catch (IOException ex) {
            Logger.getLogger(PMManageProductCatalogue.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdateButtonMouseClicked

    private void AddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddButtonMouseClicked
        FileIO fileIO = new FileIO();
        String primaryKey = this.RefNumInput.getText().trim();
        File file = fileIO.searchFilePath("ProductCatalogue.txt");

        String filePath = file.getAbsolutePath();

        if (this.RefNumInput.getText().trim() != null
                || this.TitleInput.getText().trim() != null
                || this.DateStartedInput.getText().trim() != null
                || this.DateEndInput.getText().trim() != null
                || this.DescriptionInput.getText().trim() != null
                || this.SupplierIDComboBox.getSelectedItem() != null
                || this.BannerPathInput.getText().trim() != null) {
            String newRefNum = this.RefNumInput.getText().trim();
            String newTitle = this.TitleInput.getText().trim();
            String newSeason = (this.DateStartedInput.getText().trim()) + '-' + (this.DateEndInput.getText().trim());
            String newDescription = this.DescriptionInput.getText().trim();
            String newSupplierID = (String) this.SupplierIDComboBox.getSelectedItem();
            String newImagePath = this.BannerPathInput.getText().trim();
            String newDateGenerated = Calendar.getInstance().getTime().toString();

            this.catalogue.CatRefNum = newRefNum;
            this.catalogue.CatTitle = newTitle;
            this.catalogue.CatSeason = newSeason;
            this.catalogue.CatDescription = newDescription;
            this.catalogue.SupplierID = newSupplierID;
            this.catalogue.CatFilePath = newImagePath;
            this.catalogue.DateGenerated = newDateGenerated;

            String[] newDetails = {this.catalogue.CatRefNum, this.catalogue.CatTitle, this.catalogue.CatFilePath,
                this.catalogue.CatDescription,
                this.catalogue.CatSeason, this.catalogue.DateGenerated,
                this.catalogue.SupplierID};

            if (fileIO.writeDetails(file, newDetails, 8)) {
                JOptionPane.showMessageDialog(null, "Catalogue succesfully added!");
            } else {
                JOptionPane.showMessageDialog(null, "Catalogue not added...");
            }
            try {
                ResetEverything();
            } catch (IOException ex) {
                Logger.getLogger(PMManageProductCatalogue.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please input all areas!");
        }
        try {
            ResetEverything();
        } catch (IOException ex) {
            Logger.getLogger(PMManageProductCatalogue.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddButtonMouseClicked

    private void CatalogueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CatalogueTableMouseClicked

        try {
            DefaultTableModel model = (DefaultTableModel) CatalogueTable.getModel();
            int selectedRowIndex = CatalogueTable.getSelectedRow();
            ProductItem Item = new ProductItem();
            Item.fileName = "ProductCatalogue.txt";
            FileIO getDetails = new FileIO();

            File filePath = getDetails.searchFilePath(Item.fileName);
            String primaryKey = (String) model.getValueAt(selectedRowIndex, 0);
            String[] ItemDetails = getDetails.retrieveDetails(filePath, primaryKey);

            this.RefNumInput.setText(ItemDetails[0]);
            this.TitleInput.setText(ItemDetails[1]);
            this.DescriptionInput.setText(ItemDetails[3]);
            this.BannerPathInput.setText(ItemDetails[2]);
            this.SupplierIDComboBox.setSelectedItem(ItemDetails[6]);
            String DateOfSeason = ItemDetails[4];
            String[] Dates = DateOfSeason.split("-");
            this.DateEndInput.setText(Dates[1]);
            this.DateStartedInput.setText(Dates[0]);
            File file = new File(ItemDetails[2]);
            if (!file.toString().equals(null)) {
                if (getFileExtension(file.getName()).equals("jpg") || getFileExtension(file.getName()).equals("jpeg") || getFileExtension(file.getName()).equals("png")) {
                    String filepath = file.getAbsolutePath();
                    BannerPathInput.setText(file.getAbsolutePath());
                    BannerOutputLabel.setIcon(ResizeImage(filepath));
                } else {
                    JOptionPane.showMessageDialog(null, "No image found.");
                }

                SupplierComboBoxItems();
            }
        } catch (FileNotFoundException e) {
        }
    }//GEN-LAST:event_CatalogueTableMouseClicked

    private void ExportPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportPdfButtonActionPerformed

        MessageFormat header = new MessageFormat("Catalogue");
        MessageFormat footer = new MessageFormat("");
        try {
            CatalogueTable.print(JTable.PrintMode.NORMAL, header, footer);
        } catch (java.awt.print.PrinterException e) {
            System.err.format("Cannot print", e.getMessage());
        }

    }//GEN-LAST:event_ExportPdfButtonActionPerformed

    private void UploadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UploadButtonMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        if (!file.toString().isEmpty()) {
            if (getFileExtension(file.getName()).equals("jpg") || getFileExtension(file.getName()).equals("jpeg") || getFileExtension(file.getName()).equals("png")) {
                String filepath = file.getAbsolutePath();
                BannerPathInput.setText(file.getAbsolutePath());
                BannerOutputLabel.setIcon(ResizeImage(filepath));
            } else {
                JOptionPane.showMessageDialog(null, "Please Import Correct File Type ( jpeg , png , jpg )");
            }
        }
    }//GEN-LAST:event_UploadButtonMouseClicked

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void RefreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshButtonMouseClicked
        try {
            ResetEverything();
        } catch (IOException ex) {
            Logger.getLogger(PMManageProductCatalogue.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RefreshButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PMManageProductCatalogue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PMManageProductCatalogue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PMManageProductCatalogue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PMManageProductCatalogue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PMManageProductCatalogue(null).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(PMManageProductCatalogue.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JLabel BannerLabel;
    private javax.swing.JLabel BannerOutputLabel;
    private javax.swing.JTextField BannerPathInput;
    private javax.swing.JLabel CatalogueLabel;
    private javax.swing.JTable CatalogueTable;
    private javax.swing.JTextField DateEndInput;
    private javax.swing.JLabel DateEndedLabel;
    private javax.swing.JTextField DateStartedInput;
    private javax.swing.JLabel DateStartedLabel;
    private javax.swing.JTextField DescriptionInput;
    private javax.swing.JLabel DescriptionLabel;
    private javax.swing.JButton ExportPdfButton;
    private javax.swing.JLabel LogoutButton;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton ManageProfileButton;
    private javax.swing.JButton ProductButton;
    private javax.swing.JButton ProfileButton;
    private javax.swing.JTextField RefNumInput;
    private javax.swing.JLabel ReferenceNumberLabel;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchCatalogueInput;
    private javax.swing.JLabel SearchProductCatalogueLabel;
    private javax.swing.JPanel SidePanel;
    private javax.swing.JComboBox<String> SupplierIDComboBox;
    private javax.swing.JLabel SupplierIDInput;
    private javax.swing.JTextField TitleInput;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton UploadButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
